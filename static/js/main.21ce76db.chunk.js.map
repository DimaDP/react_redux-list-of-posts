{"version":3,"sources":["components/User/User.tsx","store/index.ts","components/Comment/Comment.tsx","components/CommentList/CommentList.tsx","components/Post/Post.tsx","components/PostList/PostList.tsx","helpers/api.ts","App.tsx","index.tsx"],"names":["User","user","name","email","address","city","street","zipcode","isLoading","state","loading","isLoaded","loaded","getFilteredPosts","posts","filter","post","title","toLowerCase","includes","query","body","initialState","store","createStore","action","type","value","map","id","commentList","comment","commentId","postId","composeWithDevTools","Comment","dispatch","useDispatch","onClick","deleteComment","className","aria-label","aria-hidden","CommentList","Fragment","key","Post","toUpperCase","substring","PostList","filteredPosts","useSelector","loadData","URL","fetch","then","response","json","loadPostsWithUsers","a","users","comments","find","userId","App","handleButtonClick","data","length","placeholder","onChange","event","currentTarget","disabled","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.21ce76db.chunk.js","sourcesContent":["import React from 'react';\nimport { UserProps } from '../../helpers/types';\n\nexport const User: React.FC<UserProps> = ({ user }) => {\n  if (user) {\n    return (\n      <div>\n        <b>{user.name}</b>\n        <br />\n        <span>{user.email}</span>\n        <br />\n        <span>\n          {user.address.city}\n          ,\n          {user.address.street}\n          <i> st.</i>\n          <br />\n          {user.address.zipcode}\n        </span>\n      </div>\n    );\n  }\n\n  return <></>;\n};\n","import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n// import thunk from 'redux-thunk';\n// import { Dispatch } from 'react';\nimport { PreparedPosts } from '../helpers/types';\n\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\nconst SET_SEARCH = 'SET_SEARCH';\nconst DELETE_COMMENT = 'DELETE_COMMENT';\nconst DELETE_POST = 'DELETE_POST';\n\n// Action creators\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = (value: PreparedPosts[]) => ({ type: FINISH_LOADING, value });\nexport const setSearch = (query: string) => ({ type: SET_SEARCH, query });\nexport const deleteComment = (id: number, commentId: number) => (\n  { type: DELETE_COMMENT, id, commentId }\n);\nexport const deletePost = (postId: number) => ({ type: DELETE_POST, postId });\n\n// Selectors\nexport const isLoading = (state: RootState) => state.loading;\nexport const isLoaded = (state: RootState): boolean => state.loaded;\nexport const getPosts = (state: RootState) => state.posts;\nexport const getFilteredPosts = (state: RootState) => (\n  [...state.posts].filter(post => (\n    post.title.toLowerCase().includes(state.query.toLowerCase())\n      || post.body.toLowerCase().includes(state.query.toLowerCase()))));\n\nconst initialState = {\n  loading: false,\n  posts: [],\n  loaded: false,\n  query: '',\n};\n\n// Initial state\nexport type RootState = {\n  loading: boolean;\n  posts: PreparedPosts[];\n  loaded: boolean;\n  query: string;\n};\n\nconst reducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n\n    case FINISH_LOADING:\n      return {\n        ...state,\n        posts: action.value,\n        loaded: true,\n        loading: false,\n      };\n\n    case SET_SEARCH:\n      return {\n        ...state,\n        query: action.query,\n      };\n\n    case DELETE_COMMENT:\n      return {\n        ...state,\n        posts: state.posts.map((post: PreparedPosts) => ((post.id === action.id)\n          ? {\n            ...post,\n            commentList: post.commentList.filter(comment => comment.id !== action.commentId),\n          } : post)),\n      };\n\n    case DELETE_POST:\n      return {\n        ...state,\n        posts: state.posts.filter((post: PreparedPosts) => post.id !== action.postId),\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(),\n);\n\nexport default store;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { CommentProps } from '../../helpers/types';\nimport { deleteComment } from '../../store/index';\n\nexport const Comment: React.FC<CommentProps> = ({ comment }) => {\n  const dispatch = useDispatch();\n  const deleteCurrentComment = (id: number, commentId: number) => (\n    dispatch(deleteComment(id, commentId))\n  );\n\n  return (\n    <>\n      <button\n        onClick={() => deleteCurrentComment(comment.postId, comment.id)}\n        type=\"button\"\n        className=\"close\"\n        aria-label=\"Close\"\n      >\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n      <b>{comment.name}</b>\n      <p>{comment.body}</p>\n      <i><span>{comment.email}</span></i>\n    </>\n\n  );\n};\n","import React from 'react';\nimport './CommentList.css';\nimport { Comment } from '../Comment/Comment';\nimport { CommentListProps } from '../../helpers/types';\n\nexport const CommentList: React.FC<CommentListProps> = ({ commentList }) => (\n  <>\n    {commentList.map(comment => (\n      <React.Fragment key={comment.id}>\n        <div className=\"post__comment\">\n          <Comment\n            comment={comment}\n          />\n        </div>\n      </React.Fragment>\n    ))}\n  </>\n);\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { User } from '../User/User';\nimport { CommentList } from '../CommentList/CommentList';\nimport './Post.css';\nimport { PostProps } from '../../helpers/types';\nimport { deletePost } from '../../store';\n\nexport const Post: React.FC<PostProps> = ({ post }) => {\n  const title = post.title[0].toUpperCase() + post.title.substring(1);\n  const dispatch = useDispatch();\n  const deleteCurrentPost = (id: number) => (\n    dispatch(deletePost(id))\n  );\n\n  return (\n    <div className=\"test\">\n      <div className=\"posts__item\">\n        <button\n          onClick={() => deleteCurrentPost(post.id)}\n          type=\"button\"\n          className=\"close\"\n          aria-label=\"Close\"\n        >\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n        <h2>{title}</h2>\n        <p className=\"posts__text\">{post.body}</p>\n        <User user={post.user} />\n      </div>\n      <div className=\"post__comments\">\n        <CommentList commentList={post.commentList} />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './PostList.css';\nimport { useSelector } from 'react-redux';\nimport { Post } from '../Post/Post';\nimport { PreparedPosts } from '../../helpers/types';\nimport { getFilteredPosts } from '../../store/index';\n\nexport const PostList: React.FC = () => {\n  const filteredPosts = useSelector(getFilteredPosts);\n\n  return (\n    <div className=\"posts\">\n      {filteredPosts.map((post: PreparedPosts) => (\n        <React.Fragment key={post.id}>\n          <div>\n            <Post post={post} />\n          </div>\n        </React.Fragment>\n      ))}\n    </div>\n  );\n};\n","import\n{\n  User,\n  Post,\n  CommentInteface,\n  PreparedPosts,\n} from './types';\n\nconst API_POSTS = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/posts.json';\nconst API_USERS = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/users.json';\nconst API_COMMENTS = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/comments.json';\n\nexport const loadData = (URL: string) => (\n  fetch(URL).then(response => response.json())\n);\n\nexport const loadPostsWithUsers = async (): Promise<PreparedPosts[]> => {\n  const posts = await loadData(API_POSTS);\n  const users = await loadData(API_USERS);\n  const comments = await loadData(API_COMMENTS);\n\n  return posts.map((post: Post) => (\n    {\n      ...post,\n      user: users.find((user: User) => user.id === post.userId),\n      commentList: comments.filter((comment: CommentInteface) => comment.postId === post.id),\n    }\n  ));\n};\n","import React, { FormEvent } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport './App.scss';\nimport { PostList } from './components/PostList/PostList';\nimport { loadPostsWithUsers } from './helpers/api';\n\nimport\n{\n  finishLoading,\n  startLoading,\n  setSearch,\n  isLoaded as loaded,\n  isLoading as loading,\n  getFilteredPosts,\n} from './store/index';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const isLoading = useSelector(loading);\n  const isLoaded = useSelector(loaded);\n  const posts = useSelector(getFilteredPosts);\n\n  const handleButtonClick = async () => {\n    dispatch(startLoading());\n\n    await loadPostsWithUsers().then(data => {\n      dispatch(finishLoading(data));\n    });\n  };\n\n  const handleQuery = (event: FormEvent<HTMLInputElement>) => {\n    const { value } = event.currentTarget;\n\n    dispatch(setSearch(value));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>React dynamic list of Posts</h1>\n      <div>\n        {!isLoaded ? (\n          <>\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              onClick={handleButtonClick}\n              disabled={isLoading}\n            >\n              {isLoading ? 'loading...' : 'Load'}\n            </button>\n          </>\n        ) : (\n          <>\n            <h2>\n              Found\n              &nbsp;\n              {posts.length}\n              &nbsp;\n              posts\n            </h2>\n            <div>\n              <input\n                type=\"text\"\n                placeholder=\"search...\"\n                className=\"form-control form-control-lg\"\n                onChange={handleQuery}\n              />\n            </div>\n            <div className=\"content\">\n              <PostList />\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}